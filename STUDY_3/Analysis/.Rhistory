#Create a tables of means for task runtime
table<- tabular( (IMPASSE) ~ (EXPLICIT)
*(triangular_score)
*(mean+sd),
data=df_subjects)
html(table,options=htmloptions(head=TRUE))
#latex(table)
table<- tabular( (IMPASSE) ~ (EXPLICIT)
*(triangular_time)
*(mean+sd),
data=df_subjects)
html(table,options=htmloptions(head=TRUE))
# table<- tabular(IMPASSE ~ (triangular_time + triangular_score) *(mean+sd), data=df_subjects)
# html(table,options=htmloptions(head=TRUE))
#Create a tables of means for task runtime
table<- tabular( (IMPASSE) ~ (EXPLICIT)
*(triangular_score)
*(mean+sd),
data=df_subjects)
html(table,options=htmloptions(head=TRUE))
#latex(table)
table<- tabular( (IMPASSE) ~ (EXPLICIT)
*(triangular_time)
*(round(mean,digits = 2)+sd),
data=df_subjects)
#Create a tables of means for task runtime
table<- tabular( (IMPASSE) ~ (EXPLICIT)
*(triangular_score)
*(mean+sd),
data=df_subjects)
html(table,options=htmloptions(head=TRUE))
#latex(table)
table<- tabular( (IMPASSE) ~ (EXPLICIT)
*(triangular_time)
*(round(mean,2)+sd),
data=df_subjects)
#Create a tables of means for task runtime
table<- tabular( (IMPASSE) ~ (EXPLICIT)
*(triangular_score)
*(mean+sd),
data=df_subjects)
html(table,options=htmloptions(head=TRUE))
#latex(table)
table<- tabular( (IMPASSE) ~ (EXPLICIT)
*(triangular_time)
*((round(mean,2)+sd),
#Create a tables of means for task runtime
table<- tabular( (IMPASSE) ~ (EXPLICIT)
*(triangular_score)
*(mean+sd),
data=df_subjects)
html(table,options=htmloptions(head=TRUE))
#latex(table)
table<- tabular( (IMPASSE) ~ (EXPLICIT)
*(triangular_time)
*(mean+sd),
data=df_subjects)
html(table,options=htmloptions(head=TRUE))
# table<- tabular(IMPASSE ~ (triangular_time + triangular_score) *(mean+sd), data=df_subjects)
# html(table,options=htmloptions(head=TRUE))
# create a subset dataframe that only deals with response times
w_times = subset(df_subjects, select = c("subject","impasse", "explicit","triangular_time")) #create a wide form subset
#Create a tables of means for task runtime
table<- tabular( (IMPASSE) ~ (Heading("Explicit Scaffold")*EXPLICIT)
*(Heading("")*triangular_score)
*(mean + sd)
*Format(digits=2),
data=df_subjects)
html(table,options=htmloptions(head=TRUE))
#latex(table)
# create a subset dataframe that only deals with response times
w_times = subset(df_subjects, select = c("subject","impasse", "explicit","triangular_time")) #create a wide form subset
#Create a tables of means for task runtime
table<- tabular( (IMPASSE) ~ (Heading("Explicit Scaffold")*EXPLICIT)
*(Heading("")*triangular_score)
*(mean + sd)
*Format(digits=2),
data=df_subjects)
#html(table,options=htmloptions(head=TRUE))
#latex(table)
EXPLICIT
knitr::opts_chunk$set(echo = TRUE)
#IMPORT LIBRARIES
library(jsonlite)
library(tables) # pretty tables
library(pastecs) #stat.desc
#Create data frame for participant file
participant_file <- "data/final_participants.json"
df_subjects <- fromJSON(participant_file)
#names(df_subjects) #print names of each column in the data frame
#Create factor vectors
EXPLICIT <- factor(df_subjects$explicit, levels = c(1,2,3))
IMPASSE  <- factor(df_subjects$impasse)
AXIS  <- factor(df_subjects$axis)
knitr::opts_chunk$set(echo = TRUE)
#IMPORT LIBRARIES
library(jsonlite)
library(tables) # pretty tables
library(pastecs) #stat.desc
#Create data frame for participant file
participant_file <- "data/final_participants.json"
df_subjects <- fromJSON(participant_file)
#names(df_subjects) #print names of each column in the data frame
#Create factor vectors
EXPLICIT <- factor(df_subjects$explicit, levels = c(1,2,3), labels = c("none", "text/image", "interactive"))
IMPASSE  <- factor(df_subjects$impasse)
AXIS  <- factor(df_subjects$axis)
knitr::opts_chunk$set(echo = TRUE)
#IMPORT LIBRARIES
library(jsonlite)
library(tables) # pretty tables
library(pastecs) #stat.desc
#Create data frame for participant file
participant_file <- "data/final_participants.json"
df_subjects <- fromJSON(participant_file)
#names(df_subjects) #print names of each column in the data frame
#Create factor vectors
EXPLICIT <- factor(df_subjects$explicit, levels = c(1,2,3), labels = c("none", "text/image", "interactive"))
IMPASSE  <- factor(df_subjects$impasse, levels = c(1,2), labels = c("none", "impasse"))
AXIS  <- factor(df_subjects$axis)
df_subjects$tt_sec <- df_subjects$triangular_time / .001
knitr::opts_chunk$set(echo = TRUE)
#IMPORT LIBRARIES
library(jsonlite)
library(tables) # pretty tables
library(pastecs) #stat.desc
#Create data frame for participant file
participant_file <- "data/final_participants.json"
df_subjects <- fromJSON(participant_file)
#names(df_subjects) #print names of each column in the data frame
#Create factor vectors
EXPLICIT <- factor(df_subjects$explicit, levels = c(1,2,3), labels = c("none", "text/image", "interactive"))
IMPASSE  <- factor(df_subjects$impasse, levels = c(1,2), labels = c("none", "impasse"))
AXIS  <- factor(df_subjects$axis)
df_subjects$tt_sec <- df_subjects$triangular_time / 1000
knitr::opts_chunk$set(echo = TRUE)
#IMPORT LIBRARIES
library(jsonlite)
library(tables) # pretty tables
library(pastecs) #stat.desc
#Create data frame for participant file
participant_file <- "data/final_participants.json"
df_subjects <- fromJSON(participant_file)
#names(df_subjects) #print names of each column in the data frame
#Create factor vectors
EXPLICIT <- factor(df_subjects$explicit, levels = c(1,2,3), labels = c("none", "text/image", "interactive"))
IMPASSE  <- factor(df_subjects$impasse, levels = c(1,2), labels = c("none", "impasse"))
AXIS  <- factor(df_subjects$axis)
df_subjects$tt_min <- df_subjects$triangular_time / 1000 / 60
#Create a tables of means for task runtime
table<- tabular( (IMPASSE) ~ (Heading("EXPLICIT Scaffold")*EXPLICIT)
*(Heading("")*tt_min)
*(mean + sd)
*Format(digits=2),
data=df_subjects)
html(table,options=htmloptions(head=TRUE))
#latex(table)
#Create a tables of means for task runtime
table<- tabular( (IMPASSE) ~ (Heading("EXPLICIT Scaffold")*EXPLICIT)
*(Heading("")*tt_min)
*(mean + sd)
*Format(digits=2),
data=df_subjects)
html(table,options=htmloptions(head=TRUE))
#latex(table)
#EXPLORE SAMPLE STATISTICS
#describe the sample
descriptives<-stat.desc(df_subjects)
# time_min = round(descriptives$TOTAL_T_M[4], 0)
# time_max = round(descriptives$TOTAL_T_M[5], 0)
# time_m = round(descriptives$TOTAL_T_M[9], 0)
# time_sd = round(descriptives$TOTAL_T_M[10], 2)
#
# score_min = round(descriptives$graphScore[4], 0)
# score_max = round(descriptives$graphScore[5], 0)
# score_m = round(descriptives$graphScore[9], 0)
# score_sd = round(descriptives$graphScore[10], 2)
descriptives
#EXPLORE SAMPLE STATISTICS
#describe the sample
descriptives<-stat.desc(df_subjects$triangular_score, df_subjects$tt_min)
# time_min = round(descriptives$TOTAL_T_M[4], 0)
# time_max = round(descriptives$TOTAL_T_M[5], 0)
# time_m = round(descriptives$TOTAL_T_M[9], 0)
# time_sd = round(descriptives$TOTAL_T_M[10], 2)
#
# score_min = round(descriptives$graphScore[4], 0)
# score_max = round(descriptives$graphScore[5], 0)
# score_m = round(descriptives$graphScore[9], 0)
# score_sd = round(descriptives$graphScore[10], 2)
#EXPLORE SAMPLE STATISTICS
#describe the sample
descriptives<-stat.desc(df_subjects$triangular_score)
# time_min = round(descriptives$TOTAL_T_M[4], 0)
# time_max = round(descriptives$TOTAL_T_M[5], 0)
# time_m = round(descriptives$TOTAL_T_M[9], 0)
# time_sd = round(descriptives$TOTAL_T_M[10], 2)
#
# score_min = round(descriptives$graphScore[4], 0)
# score_max = round(descriptives$graphScore[5], 0)
# score_m = round(descriptives$graphScore[9], 0)
# score_sd = round(descriptives$graphScore[10], 2)
descriptives
#EXPLORE SAMPLE STATISTICS
#describe the sample
describe_score<-stat.desc(df_subjects$triangular_score)
describe_time<-stat.desc(df_subjects$tt_min)
# time_min = round(descriptives$TOTAL_T_M[4], 0)
# time_max = round(descriptives$TOTAL_T_M[5], 0)
# time_m = round(descriptives$TOTAL_T_M[9], 0)
# time_sd = round(descriptives$TOTAL_T_M[10], 2)
#
# score_min = round(descriptives$graphScore[4], 0)
# score_max = round(descriptives$graphScore[5], 0)
# score_m = round(descriptives$graphScore[9], 0)
# score_sd = round(descriptives$graphScore[10], 2)
describe_score
#EXPLORE SAMPLE STATISTICS
#describe the sample
describe_score<-stat.desc(df_subjects$triangular_score)
describe_time<-stat.desc(df_subjects$tt_min)
time_min = round(describe_time[4], 0)
time_max = round(describe_time[5], 0)
time_m = round(describe_time[9], 0)
time_sd = round(describe_time[10], 2)
#
# score_min = round(descriptives$graphScore[4], 0)
# score_max = round(descriptives$graphScore[5], 0)
# score_m = round(descriptives$graphScore[9], 0)
# score_sd = round(descriptives$graphScore[10], 2)
#EXPLORE SAMPLE STATISTICS
#describe the sample
describe_score<-stat.desc(df_subjects$triangular_score)
describe_time<-stat.desc(df_subjects$tt_min)
time_min = round(describe_time[4], 0)
time_max = round(describe_time[5], 0)
time_m = round(describe_time[9], 0)
time_sd = round(describe_time[10], 2)
score_min = round(describe_score[4], 0)
score_max = round(describe_score[5], 0)
score_m = round(describe_score[9], 0)
score_sd = round(describe_score[10], 2)
shapiro.test(df_subjects$triangular_score)
knitr::opts_chunk$set(echo = TRUE)
#IMPORT LIBRARIES
library(jsonlite)
library(tables) # pretty tables
library(pastecs) #stat.desc
library(ggplot) #graphs
knitr::opts_chunk$set(echo = TRUE)
#IMPORT LIBRARIES
library(jsonlite)
library(tables) # pretty tables
library(pastecs) #stat.desc
library(ggplot2) #graphs
#Create data frame for participant file
participant_file <- "data/final_participants.json"
df_subjects <- fromJSON(participant_file)
#names(df_subjects) #print names of each column in the data frame
#Create factor vectors
EXPLICIT <- factor(df_subjects$explicit, levels = c(1,2,3), labels = c("none", "text/image", "interactive"))
IMPASSE  <- factor(df_subjects$impasse, levels = c(1,2), labels = c("none", "impasse"))
AXIS  <- factor(df_subjects$axis)
df_subjects$tt_min <- df_subjects$triangular_time / 1000 / 60
shapiro.test.p
shapiro.test[0]
shapiro.test[1]
shapiro.test()
#Create a tables of means for task scores
table<- tabular( (IMPASSE) ~ (Heading("EXPLICIT Scaffold")*EXPLICIT)
*(Heading("")*triangular_score)
*(mean+sd)
*Format(digits=2),
data=df_subjects)
html(table,options=htmloptions(head=TRUE))
#latex(table)
normal_score <- shapiro.test(df_subjects$triangular_score)
#DISPLAY HISTOGRAMS
TotalTimeHist <-ggplot(df_subjects, aes(triangular_score))
TotalTimeHist + geom_histogram(binwidth=1)
coord_cartesian(xlim=c(0,15)) +
ggtitle("Total Score") +
labs(x="Score (points)", y="Number of Participants") +
theme_bw()+
theme(strip.background = element_blank())+
theme(plot.title = element_text(family = "Helvetica", color="#666666", face="bold", size=14, hjust=0.5)) +
theme(axis.title = element_text(family = "Helvetica", color="#666666", face="bold", size=10)) +
theme(panel.border = element_blank())
#Create a tables of means for task scores
table<- tabular( (IMPASSE) ~ (Heading("EXPLICIT Scaffold")*EXPLICIT)
*(Heading("")*triangular_score)
*(mean+sd)
*Format(digits=2),
data=df_subjects)
html(table,options=htmloptions(head=TRUE))
#latex(table)
normal_score <- shapiro.test(df_subjects$triangular_score)
#DISPLAY HISTOGRAMS
TotalTimeHist <-ggplot(df_subjects, aes(triangular_score)) +
TotalTimeHist + geom_histogram(binwidth=1) +
coord_cartesian(xlim=c(0,15)) +
ggtitle("Total Score") +
labs(x="Score (points)", y="Number of Participants") +
theme_bw()+
theme(strip.background = element_blank())+
theme(plot.title = element_text(family = "Helvetica", color="#666666", face="bold", size=14, hjust=0.5)) +
theme(axis.title = element_text(family = "Helvetica", color="#666666", face="bold", size=10)) +
theme(panel.border = element_blank())
#Create a tables of means for task scores
table<- tabular( (IMPASSE) ~ (Heading("EXPLICIT Scaffold")*EXPLICIT)
*(Heading("")*triangular_score)
*(mean+sd)
*Format(digits=2),
data=df_subjects)
html(table,options=htmloptions(head=TRUE))
#latex(table)
shapiro.test(df_subjects$triangular_score)
#DISPLAY HISTOGRAMS
TotalTimeHist <-ggplot(df_subjects, aes(triangular_score))
TotalTimeHist + geom_histogram(binwidth=1) +
coord_cartesian(xlim=c(0,30)) +
ggtitle("Total Score") +
labs(x="Score (points)", y="Number of Participants") +
theme_bw()+
theme(strip.background = element_blank())+
theme(plot.title = element_text(family = "Helvetica", color="#666666", face="bold", size=14, hjust=0.5)) +
theme(axis.title = element_text(family = "Helvetica", color="#666666", face="bold", size=10)) +
theme(panel.border = element_blank())
#Create a tables of means for task scores
table<- tabular( (IMPASSE) ~ (Heading("EXPLICIT Scaffold")*EXPLICIT)
*(Heading("")*triangular_score)
*(mean+sd)
*Format(digits=2),
data=df_subjects)
html(table,options=htmloptions(head=TRUE))
#latex(table)
shapiro.test(df_subjects$triangular_score)
#DISPLAY HISTOGRAMS
TotalTimeHist <-ggplot(df_subjects, aes(triangular_score))
TotalTimeHist + geom_histogram(binwidth=1) +
coord_cartesian(xlim=c(0,30)) +
ggtitle("Total Score") +
labs(x="Score (points)", y="Number of Participants") +
theme_bw()+
theme(strip.background = element_blank())+
theme(plot.title = element_text(family = "Helvetica", color="#666666", face="bold", size=14, hjust=0.5)) +
theme(axis.title = element_text(family = "Helvetica", color="#666666", face="bold", size=10)) +
theme(panel.border = element_blank())
#Create a tables of means for task scores
table<- tabular( (IMPASSE) ~ (Heading("EXPLICIT Scaffold")*EXPLICIT)
*(Heading("")*triangular_score)
*(mean+sd)
*Format(digits=2),
data=df_subjects)
html(table,options=htmloptions(head=TRUE))
#latex(table)
shapiro.test(df_subjects$triangular_score)
#DISPLAY HISTOGRAMS
TotalTimeHist <-ggplot(df_subjects, aes(triangular_score))
TotalTimeHist + geom_histogram(binwidth=1) +
coord_cartesian(xlim=c(0,15)) +
ggtitle("Total Score") +
labs(x="Score (points)", y="Number of Participants") +
theme_bw()+
theme(strip.background = element_blank())+
theme(plot.title = element_text(family = "Helvetica", color="#666666", face="bold", size=14, hjust=0.5)) +
theme(axis.title = element_text(family = "Helvetica", color="#666666", face="bold", size=10)) +
theme(panel.border = element_blank())
#Create a tables of means for task scores
table<- tabular( (IMPASSE) ~ (Heading("EXPLICIT Scaffold")*EXPLICIT)
*(Heading("")*triangular_score)
*(mean+sd)
*Format(digits=2),
data=df_subjects)
html(table,options=htmloptions(head=TRUE))
#latex(table)
score_normal <- shapiro.test(df_subjects$triangular_score)
#DISPLAY HISTOGRAMS
TotalTimeHist <-ggplot(df_subjects, aes(triangular_score))
TotalTimeHist + geom_histogram(binwidth=1) +
coord_cartesian(xlim=c(0,15)) +
ggtitle("Total Score") +
labs(x="Score (points)", y="Number of Participants") +
theme_bw()+
theme(strip.background = element_blank())+
theme(plot.title = element_text(family = "Helvetica", color="#666666", face="bold", size=14, hjust=0.5)) +
theme(axis.title = element_text(family = "Helvetica", color="#666666", face="bold", size=10)) +
theme(panel.border = element_blank())
score_normal
score_normal[0]
score_normal[1]
score_normal[2]
round(score_normal[1],digits = 2)
round(score_normal[1], digits = 2)
score_normal[1]
x <- score_normal[1]
x
x[0]
x[1]
x[1[1]]
knitr::opts_chunk$set(echo = TRUE)
#IMPORT LIBRARIES
library(jsonlite)
library(tables) # pretty tables
library(pastecs) #stat.desc
library(ggplot2) #graphs
#Create data frame for participant file
participant_file <- "data/final_participants.json"
df_subjects <- fromJSON(participant_file)
#names(df_subjects) #print names of each column in the data frame
#Create factor vectors
EXPLICIT <- factor(df_subjects$explicit, levels = c(1,2,3), labels = c("none", "text/image", "interactive"))
IMPASSE  <- factor(df_subjects$impasse, levels = c(1,2), labels = c("none", "impasse"))
AXIS  <- factor(df_subjects$axis)
df_subjects$tt_min <- df_subjects$triangular_time / 1000 / 60
#Count number of participants
nSubjects <- nrow(df_subjects)
nFemale <-sum(df_subjects$sex == "Female")
#ASSESS NORMALITY OF RUNTIME
QP_time <- qplot(sample = df_subjects$tt_min, main="Q-Q Plot: Total Score") + theme_bw()
QP_time
#ASSESS NORMALITY OF SCORE
QP_time <- qplot(sample = df_subjects$triangular_score, main="Q-Q Plot: SCORE") + theme_bw()
QP_time
model = lm(tt_min ~ explicit + impasse + explicit:impasse,
data = df_subjects)
Anova(model,
type = "II")
knitr::opts_chunk$set(echo = TRUE)
#IMPORT LIBRARIES
library(jsonlite)
library(tables) # pretty tables
library(pastecs) #stat.desc
library(ggplot2) #graphs
library(car) #ANOVA
#Create data frame for participant file
participant_file <- "data/final_participants.json"
df_subjects <- fromJSON(participant_file)
#names(df_subjects) #print names of each column in the data frame
#Create factor vectors
EXPLICIT <- factor(df_subjects$explicit, levels = c(1,2,3), labels = c("none", "text/image", "interactive"))
IMPASSE  <- factor(df_subjects$impasse, levels = c(1,2), labels = c("none", "impasse"))
AXIS  <- factor(df_subjects$axis)
df_subjects$tt_min <- df_subjects$triangular_time / 1000 / 60
#Count number of participants
nSubjects <- nrow(df_subjects)
nFemale <-sum(df_subjects$sex == "Female")
# interaction.plot(x.factor     = df_subjects$impasse,
#                  trace.factor = df_subjects$explicit,
#                  response     = df_subjects$triangular_score,
#                  fun = mean,
#                  type="b",
#                  col=c("red","blue","green"),  ### Colors for levels of trace var.
#                  pch=c(19, 17, 15),             ### Symbols for levels of trace var.
#                  fixed=TRUE,                    ### Order by factor order in data
#                  leg.bty = "o")
ggplot(df_subjects) +
aes(x = impasse, color = explicit, group = explicit, y = triangular_score) +
coord_cartesian(ylim=c(0,15)) +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line")
ggplot(df_subjects,aes(explicit, triangular_score, colour=factor(impasse))) +
geom_jitter(alpha=.3) +
geom_smooth(method=lm) +
coord_cartesian(xlim = c(1,2), ylim= c(1,15))
factor(impasse)
factor(impasse)
factor(IMPASSE)
factor(EXPLICIT)
impasse
df_subjects$impasse
IMPASSE
# interaction.plot(x.factor     = df_subjects$impasse,
#                  trace.factor = df_subjects$explicit,
#                  response     = df_subjects$triangular_score,
#                  fun = mean,
#                  type="b",
#                  col=c("red","blue","green"),  ### Colors for levels of trace var.
#                  pch=c(19, 17, 15),             ### Symbols for levels of trace var.
#                  fixed=TRUE,                    ### Order by factor order in data
#                  leg.bty = "o")
# ggplot(df_subjects)+
#   aes(x=IMPASSE, y=triangular_score, colour=EXPLICIT, group = EXPLICIT) +
#   geom_line(aes(group = EXPLICIT)) +
#   coord_cartesian(ylim= c(1,15))
ggplot(df_subjects) +
aes(x = IMPASSE, y = triangular_score, color = EXPLICIT, group = EXPLICIT) +
coord_cartesian(ylim= c(1,15)) +
# geom_linerange(aes(x = IMPASSE, ymin = tip_groups - tip_sem, ymax = tip_groups + tip_sem), size = .3) +
labs(title = "Moderating role of smoking status on the effect of sex on tip",
subtitle = "Error bars indicate standard error of the mean")
# interaction.plot(x.factor     = df_subjects$impasse,
#                  trace.factor = df_subjects$explicit,
#                  response     = df_subjects$triangular_score,
#                  fun = mean,
#                  type="b",
#                  col=c("red","blue","green"),  ### Colors for levels of trace var.
#                  pch=c(19, 17, 15),             ### Symbols for levels of trace var.
#                  fixed=TRUE,                    ### Order by factor order in data
#                  leg.bty = "o")
# ggplot(df_subjects)+
#   aes(x=IMPASSE, y=triangular_score, colour=EXPLICIT, group = EXPLICIT) +
#   geom_line(aes(group = EXPLICIT)) +
#   coord_cartesian(ylim= c(1,15))
ggplot(df_subjects)+
aes(x = IMPASSE, y = triangular_score, colour = EXPLICIT, group=EXPLICIT) +
stat_summary(fun.y=mean, geom="point")+
stat_summary(fun.y=mean, geom="line")+
labs(title = "Effect of implict & explicit scaffolds on Score",
subtitle = "Error bars indicate standard error of the mean") +
xlab("Implicit Scaffold")+
ylab("Score")
